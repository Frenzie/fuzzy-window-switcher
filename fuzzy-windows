#!/usr/bin/python
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Keybinder', '3.0')

from gi.repository import Gtk, GdkPixbuf, Wnck, Keybinder, Gdk, GdkX11
import re
import ConfigParser
import os


class FuzzyMatcher():

    def __init__(self):
        self.pattern = ''

    def setPattern(self, pattern):
        self.pattern = re.compile('.*?'.join(map(re.escape, list(pattern))))

    def score(self, string):
        match = self.pattern.search(string)
        if match is None:
            return 0
        else:
            return 100.0 * (1.0/(1 + match.start()) + 1.2/(match.end() - match.start() + 1))


class WindowList():

    def __init__(self, ignored_windows):
        self.windowList = []
        self.previousWindow = None
        self.fuzzyMatcher = FuzzyMatcher()
        self.ignored_windows = ignored_windows

    def refresh(self):
        # Clear existing
        self.windowList = []

        # Get the screen and force update
        screen = Wnck.Screen.get_default()
        screen.force_update()

        # Get previous active window
        self.previousWindow = screen.get_active_window()

        # Get a list of windows
        window_list = screen.get_windows()
        for i in window_list:
            # Filter out extraneous windows
            name = i.get_name()
            window_type = i.get_window_type()

            if window_type == Wnck.WindowType.DOCK:
                continue

            if name in self.ignored_windows:
                continue

            self.windowList.append({'name': name, 'icon': i.get_icon(), 'window': i, 'rank': 0})

    def getLatest(self):
        self.refresh()
        return self.windowList

    def get(self):
        return self.windowList

    def getHighestRanked(self):
        if (len(self.windowList)):
            return self.windowList[0]

        return None

    def rank(self, text):
        self.fuzzyMatcher.setPattern(text)
        for i in self.windowList:
            i['rank'] = self.fuzzyMatcher.score(i['name'].lower())

        self.windowList.sort(key=lambda x: x['rank'], reverse=True)

    def getPreviousWindow(self):
        return self.previousWindow


class FuzzyWindow(Gtk.Window):

    def __init__(self, config):
        Gtk.Window.__init__(self, title='Fuzzy Windows')

        # Window is initially hidden
        self.hidden = True

        # Set up the vbox
        self.vbox = Gtk.Box(spacing=10)
        self.vbox.set_orientation(Gtk.Orientation.VERTICAL)
        self.add(self.vbox)

        # Set up the box to enter an app name
        self.enteredName = Gtk.Entry()
        self.vbox.pack_start(self.enteredName, True, True, 0)

        # Create a store for data
        self.appListStore = Gtk.ListStore(str, GdkPixbuf.Pixbuf)
        # Create a view for the data
        self.appListView = Gtk.TreeView(self.appListStore)

        # Create the necessary columns
        columnIcon = Gtk.TreeViewColumn("Icon")
        cellIcon = Gtk.CellRendererPixbuf()
        columnIcon.pack_start(cellIcon, False)
        columnIcon.add_attribute(cellIcon, "pixbuf", 1)
        self.appListView.append_column(columnIcon)

        columnAppName = Gtk.TreeViewColumn("App Name")
        cellAppName = Gtk.CellRendererText()
        columnAppName.pack_start(cellAppName, False)
        columnAppName.add_attribute(cellAppName, "text", 0)
        self.appListView.append_column(columnAppName)

        # Add the list box to the window
        scrolledWindow = Gtk.ScrolledWindow()
        scrolledWindow.set_size_request(700, 200)
        scrolledWindow.add(self.appListView)
        self.vbox.pack_start(scrolledWindow, True, True, 0)

        # Initialize window list
        self.windowList = WindowList(config.get('DEFAULT', 'ignored_windows'))

        # Register events
        self.enteredName.connect("changed", self.enteredNameChanged)
        self.connect("key-press-event", self.keypress)
        self.appListView.connect("row-activated", self.presentManual)

        # Populate initially
        self.populate(self.windowList.getLatest())

    def populate(self, items):
        self.appListStore.clear()
        for i in items:
            self.appListStore.append([i['name'], i['icon']])

    def enteredNameChanged(self, entry):
        text = entry.get_text()
        if text:
            self.windowList.rank(text)
            self.populate(self.windowList.get())

    def presentWindow(self, window):
        workspace = window.get_workspace()
        if workspace is not None:
            workspace.activate(self.getXTime())

        window.activate(self.getXTime())

    def presentHighestRanked(self):
        highestRanked = self.windowList.getHighestRanked()
        if highestRanked is not None:
            self.presentWindow(highestRanked['window'])

    def presentManual(self, view, path, column):
        indices = path.get_indices()
        if len(indices) < 1:
            return

        index = indices[0]
        windows = self.windowList.get()
        if index < len(windows):
            self.toggle()
            self.presentWindow(windows[index]['window'])

    def keypress(self, widget, event):
        if event.keyval == Gdk.KEY_Escape:
            self.toggle()
        elif event.keyval == Gdk.KEY_Return:
            self.toggle()
            self.presentHighestRanked()

    def toggle(self):
        if self.hidden:
            # Set state
            self.hidden = False
            self.show_all()

            # Clear out the text field
            self.enteredName.set_text('')
            self.enteredName.grab_focus()

            # Populate windows
            self.windowList.refresh()
            self.populate(self.windowList.get())

            # Show our window with focus
            self.stick()

            time = self.getXTime()

            self.get_window().show()
            self.get_window().focus(time)
        else:
            self.hidden = True
            self.get_window().hide()

    def hotkey(self, key, data):
        self.toggle()

    def getXTime(self):
        try:
            time = GdkX11.x11_get_server_time(self.get_window())
        except:
            time = 0

        return time

# Load the configuration with defaults
config = ConfigParser.ConfigParser()
config.set('DEFAULT', 'hotkey', 'F10')
config.set('DEFAULT', 'ignored_windows',
           [''])
config.read(os.path.expanduser('~/.fuzzy-windows'))

# Tackle the window list by turning it into a list if its a string
if (type(config.get('DEFAULT', 'ignored_windows')) is str):
    val = config.get('DEFAULT', 'ignored_windows')
    config.set('DEFAULT', 'ignored_windows', filter(None, val.split("\n")))

# Create the window and set attributes
win = FuzzyWindow(config)
win.connect("delete-event", Gtk.main_quit)
win.set_position(Gtk.WindowPosition.CENTER)
win.set_keep_above(True)
win.set_skip_taskbar_hint(True)

# Set the hotkey
Keybinder.init()
if not Keybinder.bind(config.get('DEFAULT', 'hotkey'), win.hotkey, None):
    print "Could not bind the hotkey:", config.get('DEFAULT', 'hotkey')
    exit()

# The main loop
Gtk.main()
